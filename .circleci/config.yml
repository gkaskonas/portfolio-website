version: 2.1
orbs:
  aws-cli: circleci/aws-cli@2.0.0
jobs:
  build:
    docker:
      - image: node:12.13.0
    working_directory: ~/portfolio-website
    steps:
      - checkout
      - run:
          name: Install Gatsby
          command: npm install -g gatsby
      - run:
          name: Install dependencies
          command: npm install
      - save_cache:
          key: npm-deps-{{ checksum "package.json" }}
          paths:
            - node_modules
      - run:
          name: Generate static website
          command: |
            gatsby build
      - run:
          name: Install AWS CLI and JQ
          command: |
            apt-get update
            apt-get install -y jq
  deploy-dev:
    working_directory: ~/portfolio-website
    docker:
      - image: node:12.13.0
    steps:
      - checkout
      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
      - run: 
          name: "Set up environment var"
          command: echo "export ENVIRONMENT=dev"
      - run:
          name: Assume Role
          command: |
            chmod +x scripts/aws-cli-assumerole.sh
            source scripts/aws-cli-assumerole.sh
      - run:
          name: Deploy the infra
          command: |
            aws cloudformation deploy --template aws-infra/template.yml --stack-name cfPortfolioWebsite-${ENVIRONMENT} --parameter-overrides file://aws-infra/template-params-${ENVIRONMENT}.json --capabilities CAPABILITY_IAM
      - run:
          name: Delete the infra
          command: |
            aws cloudformation delete-stack --stack-name cfPortfolioWebsite-${ENVIRONMENT} 
  deploy-test:
    working_directory: ~/portfolio-website
    docker:
      - image: node:12.13.0
    steps:
      - checkout
      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run: 
          name: "Set up environment var"
          command: echo "export ENVIRONMENT=test"
      - run:
          name: Assume Role
          command: |
            chmod +x scripts/aws-cli-assumerole.sh
            source scripts/aws-cli-assumerole.sh
      - run:
          name: Deploy the infra
          command: |
            aws cloudformation deploy --template aws-infra/template.yml --stack-name cfPortfolioWebsite-${ENVIRONMENT} --parameter-overrides file://aws-infra/template-params-${ENVIRONMENT}.json --capabilities CAPABILITY_IAM
      - run:
          name: Deploy the website
          command: aws s3 cp public/* s3://pk-portfolio-website-${ENVIRONMENT}
  deploy-prod:
    working_directory: ~/portfolio-website
    docker:
      - image: node:12.13.0
    steps:
      - checkout
      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run: 
          name: "Set up environment var"
          command: echo "export ENVIRONMENT=prod"
      - run:
          name: Assume Role
          command: |
            chmod +x scripts/aws-cli-assumerole.sh
            source scripts/aws-cli-assumerole.sh
      - run:
          name: Deploy the infra
          command: |
            aws cloudformation deploy --template aws-infra/template.yml --stack-name cfPortfolioWebsite-${ENVIRONMENT} --parameter-overrides file://aws-infra/template-params-${ENVIRONMENT}.json --capabilities CAPABILITY_IAM
      - run:
          name: Deploy the website
          command: aws s3 cp public/* s3://pk-portfolio-website-${ENVIRONMENT}
workflows:
  version: 2.1
  website:
    jobs:
      - build
      - deploy-dev:
          requires:
            - build
      - deploy-test:
          requires:
            - build
            - deploy-dev
          filters:
            branches:
              only: master
      - approve-prod:
          type: approval
          requires:
            - build
            - deploy-test
          filters:
            branches:
              only: master
      - deploy-prod:
          requires:
            - build
            - deploy-test
            - approve-prod
          filters:
            branches:
              only: master